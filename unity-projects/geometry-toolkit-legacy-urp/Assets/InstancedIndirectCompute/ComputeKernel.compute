#pragma kernel CSPositionKernel
 
 #define thread_group_size_x 64
 #define thread_group_size_y 1

RWStructuredBuffer<float4> positionBuffer;

float _Dim;
float _Time;

float rand(in float2 uv)
{
	float2 noise = (frac(sin(dot(uv ,float2(12.9898,78.233)*2.0)) * 43758.5453));
	return abs(noise.x + noise.y) * 0.5;
}

void rotate2D(inout float2 v, float r)
{
	float s, c;
	sincos(r, s, c);
	v = float2(v.x * c - v.y * s, v.x * s + v.y * c);
}

[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSPositionKernel (uint3 id : SV_DispatchThreadID)
{
	// this uv assumes the # of instances is _Dim * _Dim. 
	// so we calculate the uv inside a grid of _Dim x _Dim elements.
	float2 uv = float2( floor(id.x / _Dim) / _Dim, (id.x % (int)_Dim) / _Dim);
	
	// in this case, _Dim can be replaced by the grid size in the world
	float4 pos = float4((uv.x - 0.5) * _Dim, 0, (uv.y - 0.5) * _Dim, rand(uv));

	float rotation = pos.w * pos.w * _Time * 0.5f;
	rotate2D(pos.xz, rotation);
	
	positionBuffer[id.x] = pos;
}